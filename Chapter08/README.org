* 打造自由智能的开发环境
** 使用脚本和开源自由的命令行工具强化开发环境
*** Lisp
    - 历史悠久
    - 早期，Lisp 是用于开发人工智能的语言
*** TODO 三个重要的功能
    - 代码导航
    - 代码自动完成
    - 在项目中找文件
#+BEGIN_SRC lisp
;; 文件跳转
M-x find-file-in-project-at-point (, j j)

Find Tag
imenu items
#+END_SRC
** 理解环境变量
*** Windows 设置环境变量
#+BEGIN_SRC shell
# 查看环境变量
echo %PATH%
echo %HOME%
d:\cygwin64\home\Administrator
# 在 Windows 中才用设置 HOME 环境变量，Linux 和 Mac 默认设置好了
# PATH 环境变量设置方法，建议通过面板永久设置
set PATH=%PATH%;D:\Temp
#+END_SRC
*** Linux/Mac 设置环境变量
#+BEGIN_SRC shell
# 查看环境变量
echo $PATH
# 设置环境变量，可写进配置文件永久生效
export PATH=$PATH:/home/joe/temp
#+END_SRC
** 在 Windows 上安装 Cygwin
** 在 MacOS 上安装 Homebrew
** 在 Linux 上使用 Apt 安装第三方软件
#+BEGIN_SRC shell
git --version
sudo apt autoremove git
sudo apt install git
#+END_SRC
** Emacs Lisp 基础: 变量
*** 评估表达式
#+BEGIN_SRC lisp
M-x eval-expression (, e e)
M-x eval-buffer (, e b)
M-x erase-buffer

;; 拼接两个字符串
(concat "ab" "cd")
;; 设置变量
(setq a 5)
(setq b "abc")
(setq c "eeeee")
#+END_SRC

** Emacs Lisp 基础: 函数
*** 函数定义
    - 交互式命令
    - 插入函数
#+BEGIN_SRC lisp
;; define function
(defun hello1 (v1)
  ;; print message
  (message "Hello World")
  (+ v1 3))

;; formatted print
(defun hello2 (v2 v3 v4)
  (message "v2=%s v3=%s v4=%s" v2 v3 v4)
  (message "v2=%s" v2))

;; function => interactive command
(defun bye ()
  (interactive)
  (message "bye world"))

;; insert a new line
(defun pnl ()
  (interactive)
  (insert "This is a new line\n"))
#+END_SRC
** Emacs Lisp 基础: 运算符
*** 查看函数的技巧
#+BEGIN_SRC lisp
;; 在要查找的函数前加一个空格可以匹配相关的函数
C-h f <Space>FUNCTION
#+END_SRC
*** 算术运算和一些函数
#+BEGIN_SRC lisp
;; 算术运算
(defun my-sum (v1 v2 v3)
  ;; v1 + v2 + v3
  (+ v1 v2 v3))

(defun my-minus (v1 v2 v3)
  (- v1 v2 v3))

(defun my-multi (v1 v2 v3)
  (* v1 v2 v3))

(defun my-div (v1 v2 v3)
  (/ v1 v2 v3))

;; 字符串拼接
(defun my-str-op (v1)
  (concat v1 "good" "day" "! haha"))

;; 取字符串的第一个字符
(defun my-substr (v1)
  ;; (sbustring STRING FROM TO)
  (substring v1 0 1))

;; 比较两个字符串是否相等
;; t or nil
(defun my-estr (v1 v2)
  (string-equal v1 v2))

;; 去掉词左右两边的空白
(defun my-tstr (v1)
  (string-trim v1))
#+END_SRC
** Emacs Lisp 基础: 数据结构
*** 列表
#+BEGIN_SRC lisp
;; 创建一个列表
;; list a => b => c => e => list-end
;; (setq my-list (list a b c))
(setq my-list (list "a" "b" 1 2))

;; 简写，但是只能使用字面量
(setq my-list2 '("abc" "b" 1))

;; car 返回列表的第一个元素
(message "car=%s" (car my-list2))

;; cdr 返回除第一个元素的列表
(message "cdr=%s" (cdr my-list2))

;; 获取列表中的某个元素，索引从 0 开始
(message "nth(0)=%s nth(1)=%s" (nth 0 my-list) (nth 1 my-list))

;; 判断一个对象是否是列表
(message "listp=%s" (listp my-list))

;; 其他类型的测试函数一般都以 p 结尾
;; stringp、numberp

;; 计算列表长度
;; M-x eval-expression (length my-list)

;; a => b
(setq my-cons (cons "abcde" "bbb"))
(message "car=%s cdr=%s type of cdr=%s" (car my-cons) (cdr my-cons) (stringp (cdr my-cons)))

;; cons 的另一种写法
(setq my-cons2 '("Joe" . "Chen"))
;; 测试数据类型
(message "type=%s" (consp my-cons2))
#+END_SRC
*** 数组
    - array
*** 哈希表
    - hashtable
** Emacs Lisp 基础: 正则表达式
#+BEGIN_SRC lisp
;; replace-regexp-in-string
;; 通常用于过滤一些不需要的内容
(setq str "abc1339def")
(setq a (replace-regexp-in-string "[0-9]+" "" str))

;; string-match match-string
;; 把数字过滤出来
(when (string-match "[a-z]*\\([0-9]*\\)[a-z]*" str)
  ;; 1 表示从左往右匹配
  (message "num=%s" (match-string 1 str)))
#+END_SRC
** Emacs Lisp 基础: 语句(statement)
** Emacs Lisp 基础: 与命令行交互
