* 在 Emacs 中应用文本文件操作术
** 安装并学习使用 Emacs 和 Evil
*** 安装 Emacs
    - Emacs 官网
      https://www.gnu.org/software/emacs/
*** 配置环境变量
    - Linux
    - Windows
*** 下载 Emacs 配置文件
    - 陈斌的 Emacs 配置文件
      https://github.com/redguardtoo/emacs.d
    - 把配置文件放到 Emacs 能识别的配置目录
    #+BEGIN_SRC bash
    cd ~
    git clone https://github.com/redguardtoo/emacs.d.git
    mv emacs.d .emacs.d
    #+END_SRC
*** 启动
    - 不使用 X 运行 Emacs
    #+BEGIN_SRC bash
    emacs -nw
    #+END_SRC
    - 进入后会询问是否暂时切换到中国的镜像
      - 使用中国的镜像速度快，但有时可能会出错
      - 挂代理可以选择 no
** 学习 Emacs 官方教程
#+BEGIN_SRC lisp
;; 指定语言
M-x help-with-tutorial-spec-language
;; 使用英文版
M-x help-with-tutorial (C-h t)
#+END_SRC
*** 基础按键
| HotKey    | Effect                     |
|-----------+----------------------------|
| C-x C-c   | 退出 Emacs                 |
| C-g       | 中断正在输入的命令         |
| C-x k     | 杀死缓冲区                 |
| C-v       | 滚动到下一屏               |
| M-v       | 滚动到上一屏               |
| C-l       | 清屏重绘，光标移到屏幕中间 |
| C-p       | 上                         |
| C-n       | 下                         |
| C-b       | 左                         |
| C-f       | 右                         |
| M-f       | 光标向前移动一个词单位     |
| M-b       | 光标向后移动一个词单位     |
| C-a       | 移到行首                   |
| C-e       | 移到行尾                   |
| M-a       | 移到句首                   |
| M-e       | 移到句尾                   |
| M-<       | 移到文本首                 |
| M->       | 移到文本尾                 |
| C-u       | 重复计数                   |
| C-u 8 C-f | 向右移动 8 个字符          |
| C-x 1     | 仅保留当前子窗口           |
| C-x 2     | 垂直切分窗口               |
| C-x 3     | 水平切分窗口               |
| <DEL>     | 删除光标前的字符           |
| C-d       | 删除光标后的字符           |
| M-<DEL>   | 删除光标前的词             |
| M-d       | 删除光标后的词             |
| C-k       | 删除当前光标到行尾的字符   |
| M-k       | 删除当前光标到句尾的字符   |
| C-u 8 *   | 输入 ********              |
| C-<SPC>   | 标记                       |
| C-@       | 标记                       |
| C-w       | 剪切                       |
| C-y       | 粘贴                       |
| C-/       | 撤消                       |
| C-_       | 撤消                       |
| C-x u     | 撤消                       |
| C-x C-f   | 查找文件                   |
| C-x C-s   | 保存文件                   |
| C-x C-b   | 列出缓冲区                 |
| C-x b     | 切换缓冲区                 |
| C-x s     | 保存一些缓冲区             |
| C-x C-z   | 挂起 Emacs                 |
| C-h m     | 看当前 Major mode 的文档   |
| C-x o     | 跳到下一个子窗口，循环     |
| C-h a     | 查找命令                   |
| C-h ?     | 帮助                       |
| C-h k     | 查找快捷键的功能说明       |
| C-h f     | 描述函数的功能             |
| C-h v     | 描述变量的作用             |
| C-h t     | 打开入门教程               |
| C-h i     | 打开手册                   |

** Emacs 的自由开放使其拥有一些独特的功能
*** 在 VSCode 中，一个项目只能有一个布局
*** 在 Emacs 中，一个项目可以有任意多个布局
#+BEGIN_SRC lisp
;; 创建布局
wg-create-workgroup (SPC s s)
;; 打开布局
wg-open-workgroup (SPC l l)
;; 保存的位置
~/.emacs_workgroups
#+END_SRC
** 如何测量并优化工作流
*** keyfreq 插件
#+BEGIN_SRC lisp
;; 查看按键使用频率
M-x keyfreq-show
#+END_SRC
*** repeat
    - 在 Emacs 启用 Evil 模式后，可以使用 . 来重复上一次操作。
    - 替换数量少，又需要一步步确认可以使用这种方法。
*** TODO 更高效的全局搜索替换
#+BEGIN_SRC lisp
M-x mark-whole-buffer (, x h) (C-x h)
#+END_SRC
    - 配合 Git 取消不需要的替换
    - 大而复杂的项目，推荐使用这种方法
** 文本编辑的核武器
*** TODO 在多文件中查找替换
#+BEGIN_SRC lisp
;; 选中
;; 查找替换，此时可以选择指定文件或排除指定文件
M-x my-multi-purpose-grep (, q q)
;; 反向过滤，如
!code.js
;; 进入 ivy-occur
C-x C-o
;; 让 Buffer 可以编辑 (wgrep-exit)
C-x C-q
;; 若想删除某行，可以标记删除
C-c C-d
;; 结束编辑
C-c C-c
#+END_SRC
** 少有人知道的打开文件的技巧
*** 技巧
#+BEGIN_SRC lisp
M-x find-file-in-project-by-selected (, k k)
;; 输入
p1
proj1
;; 使用正则表达式
p[1-2]
;; 反向过滤
!p2
;; 在某个文件中有某个文件的路径，可以跳转，同 Vim 的 gf
M-x find-file-in-project-at-point (, j j)
;; 在当前文件的目录中查找文件
M-x find-file-in-current-directory (, t t)
;; 这个命令支持前缀参数，在当前文件目录的上一层目录查找
C-u 1 , t t
;; 简化
1 , t t
#+END_SRC
** 操作子窗口最理想的技巧
#+BEGIN_SRC lisp
;; 借助 winum 插件实现
;; 方法1
M-number
;; 方法2
,-number
;; 借助 ace-window 插件实现
C-x o number
#+END_SRC
* 快捷键
** 默认 Vi 模式
** ,rr 打开最近文件
** ,xx 选中，x 继续扩选
** % 配对符号间跳转
** 代码完成
*** C-x C-l 完成行
** ,kk 在项目中查找文件
** ,qq 在项目中搜索内容
